// 컬렉션 캡슐화하기

// 1. 변수 캡슐화
class 사람만드는클래스 {
  _이름;
  _듣는수업;
  constructor(이름) {
    this._이름 = 이름;
    this._듣는수업 = [];
  }
  get 이름() {
    return this._이름;
  }

  get 듣는수업() {
    return this._듣는수업;
  }

  // 세터는 함수 추가 후 필요가 없다면 제거 또는 복제본 저장
  set 듣는수업(새로운듣는수업) {
    this._듣는수업 = 새로운듣는수업.slice();
  }

  // 원소 추가/제거 함수 추가
  수업추가함수(새로들을수업) {
    this._듣는수업.push(새로들을수업);
  }
  수업제거함수(
    그만들을수업,
    대충에러콜백함수 = () => {
      throw new Error("원소 없는뎅 ㅎ");
    }
  ) {
    const 그만들을수업위치 = this._듣는수업.indexOf(그만들을수업);
    if (그만들을수업위치 === -1) 대충에러콜백함수();
    else this._듣는수업.splice(그만들을수업위치, 1);
  }
}

class 수업만드는클래스 {
  _이름;
  _어려운수업;
  constructor(이름, 어려운수업) {
    this._이름 = 이름;
    this._어려운수업 = 어려운수업;
  }
  get 이름() {
    return this._이름;
  }
  get 어려운수업() {
    return this._어려운수업;
  }
}

const 사람 = new 사람만드는클래스("다빈");
사람.수업추가함수(new 수업만드는클래스("개발", true));
사람.수업추가함수(new 수업만드는클래스("프론트엔드", true));
사람.수업추가함수(new 수업만드는클래스("백엔드", true));
사람.수업추가함수(new 수업만드는클래스("자바스크립트", true));
사람.수업추가함수(new 수업만드는클래스("리팩토링", true));
사람.수업추가함수(new 수업만드는클래스("최적화", true));
사람.수업추가함수(new 수업만드는클래스("데이터베이스", true));
사람.수업추가함수(new 수업만드는클래스("뽀로로", false));

const 듣는어려운수업개수 = 사람.듣는수업.filter((c) => c.어려운수업).length;
console.log(사람);
console.log(듣는어려운수업개수);

// 정리
// 1. 컬렉션을 참조하는 변수를 캡슐화한다.
// 2. 컬렉션에 원소를 추가/제거하는 함수를 추가한다.
// 3. 컬렉션을 참조하는 부분을 모두 적절한 함수 호출로 바꾼다.
// 4. 컬렉션 게터를 수정해서 원본 내용을 수정할 수 없는 읽기 전용 객체를 반환하게 한다.
